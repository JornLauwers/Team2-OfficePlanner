@page "/Report"
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Globalization
@inject HttpClient Http


<h3>Report</h3>

@if (DataItems == null || activeSetting == null)
{
    <p>Loading...</p>
}
else
{
    <table>
        @foreach (var entry in DataItems)
        {
            <tr>
                <td>@entry.Text</td>
            </tr>
        }

    </table>
}


@code {

    [Inject]
    public IReservationsService ReservationsService { get; set; }

    [Inject]
    public ISettingsService SettingsService { get; set; }
    public SettingReadViewModel activeSetting;
    public List<DataItem> DataItems;

    public int RequiredReservationDays;

    public DateTime startDate;
    public DateTime endDate;


    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Now.AddDays(-1);
        endDate = DateTime.Now.AddDays(7);
        activeSetting = await SettingsService.GetActiveSetting(DateTime.Now);


        RequiredReservationDays = activeSetting.DaysRequiredInOffice;

        ReservationListView fetchedData = await ReservationsService.GetReservationByDate(startDate, endDate);
        var uniqueUsers = fetchedData.Reservations.Select(x => x.UserName).Distinct().ToList();

        foreach (var user in uniqueUsers)
        {
            int ReservationDays = 0;

            var reservationsOfUser = fetchedData.Reservations.Where(x => x.UserName == user).ToList();

            int totalHours = 0;
            foreach (var reservation in reservationsOfUser)
            {
                var length = (reservation.EndDate - reservation.StartDate).TotalHours;
                totalHours = totalHours + (int)length;
            }
            ReservationDays = totalHours / 8;
            Console.WriteLine(ReservationDays);

            DataItems.Add(new DataItem
            {
                Text = $"Username {user} has reserved {ReservationDays} out of {RequiredReservationDays} this week."
            });

        }
    }


    // https://stackoverflow.com/questions/662379/calculate-date-from-week-number
    public static DateTime FirstDateOfWeekISO8601(int year, int weekOfYear)
    {
        DateTime jan1 = new DateTime(year, 1, 1);
        int daysOffset = DayOfWeek.Thursday - jan1.DayOfWeek;

        // Use first Thursday in January to get first week of the year as
        // it will never be in Week 52/53
        DateTime firstThursday = jan1.AddDays(daysOffset);
        var cal = CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstThursday, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

        var weekNum = weekOfYear;
        // As we're adding days to a date in Week 1,
        // we need to subtract 1 in order to get the right date for week #1
        if (firstWeek == 1)
        {
            weekNum -= 1;
        }

        // Using the first Thursday as starting week ensures that we are starting in the right year
        // then we add number of weeks multiplied with days
        var result = firstThursday.AddDays(weekNum * 7);

        // Subtract 3 days from Thursday to get Monday, which is the first weekday in ISO8601
        return result.AddDays(-3);
    }
}

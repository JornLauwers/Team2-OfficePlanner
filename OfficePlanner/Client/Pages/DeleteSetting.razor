@page "/configuration/settings/delete/{id}"
@inject HttpClient Http


@if (activeSetting == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Confirm setting delete</h3>

    <table class="table">
        <tbody>
            <tr>
                <td>Id</td>
                <td>@activeSetting.Id</td>
            </tr>
            <tr>
                <td>Reservation times</td>
                <td>Between @activeSetting.Workhours.StartHour &amp; @activeSetting.Workhours.EndHour</td>
            </tr>
            <tr>
                <td>Holidays</td>
                <td>
                    @foreach (var holiday in activeSetting.Holidays)
                    {
                        @holiday.Date.ToString("dd-MM-yyyy");
                        <br />
                    }
                </td>
            </tr>
            <tr>
                <td>Target reservations</td>
                <td>@activeSetting.DaysRequiredInOffice days</td>
            </tr>
            <tr>
                <td>Reservation window</td>
                <td>@activeSetting.FutureReservationWindow days</td>
            </tr>
            <tr>
                <td>Weekend reservations</td>
                <td>@activeSetting.WeekendsAllowed</td>
            </tr>
        </tbody>
    </table>
    <div style="display:block">
        <input type="submit" class="btn btn-primary" value="Delete" @onclick="@(e => RemoveSetting(e, activeSetting.Id))" />
        <a href="/configuration" class="btn btn-secondary">Cancel</a>
    </div>


}

@code {
    [Inject]
    public ISettingsService SettingsService { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    private SettingReadViewModel activeSetting;
    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        activeSetting = await SettingsService.GetSettingById(Int32.Parse(id));
    }

    async Task UpdateActiveSettingDisplay(MouseEventArgs mouseEventArgs, DateTime versionDate)
    {
        activeSetting = await SettingsService.GetActiveSetting(versionDate);
    }

    async Task RemoveSetting(MouseEventArgs mouseEventArgs, int id)
    {
        var res = await SettingsService.DeleteSetting(id);
        NavigationManager.NavigateTo("/configuration");
    }

}

@page "/calendar"
@inject DialogService DialogService
<h3>Calender</h3>
    <RadzenScheduler  @ref=@scheduler AppointmentSelect=@OnAppointmentSelect LoadData="@OnLoadData" Style="height:800px" SelectedIndex="1" Data="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text">
        <RadzenDayView StartTime=@StartTime />
        <RadzenWeekView StartTime=@StartTime />
    </RadzenScheduler>



@code {
    [Inject]
    public IReservationsService ReservationsService { get; set; }
    [Inject]
    public ISettingsService SettingsService { get; set; }
    List<DataItem> data;
    private TimeSpan StartTime { get; set; }
    RadzenScheduler<DataItem> scheduler;
    SettingReadViewModel settins { get; set; }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<DataItem> args)
    {
        await DialogService.OpenAsync<EditAppointmentPage>("Delete Reservation", new Dictionary<string, object> { { "Reservation", args.Data } });
        await scheduler.Reload();
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        ReservationListView fetchedDada = await ReservationsService.GetReservationByDate(args.Start, args.End);
        data = new List<DataItem>();
        StartTime = TimeSpan.Parse(settins.Workhours.StartHour);
        foreach (var item in fetchedDada.Reservations)
        {
            data.Add(
                new DataItem
                {
                    Id = item.Id,
                    Uid = item.User,
                    Start = item.StartDate,
                    End = item.EndDate,
                    Text = $"{item.UserName} is in {item.RoomName} from {item.StartDate.TimeOfDay} till {item.EndDate.TimeOfDay}."
                }
            );
        }
    }
    protected override async Task<Task> OnInitializedAsync()
    {
        //settins = await SettingsService.GetActiveSetting(DateTime.Today);
        settins = new SettingReadViewModel
        {
            Workhours = new OfficePlanner.Shared.Workhours
            {
                StartHour = "7:00:00",
                EndHour = "16:00:00"
            }
        };
        return base.OnInitializedAsync();
    }
}

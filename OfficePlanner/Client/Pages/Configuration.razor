@page "/configuration"
@inject HttpClient Http
<h3>Configuration</h3>

@if (allSettings == null || allRooms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>Settings</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Valid From</th>
                <th>Valid Until</th>
                <th><a href="/configuration/AddSetting" class="btn btn-primary">Add</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var setting in allSettings)
            {
                <tr @onclick="@(e => UpdateActiveSettingDisplay(e, setting.FromDate))" class="@(activeSetting.Id == setting.Id ? "table-active" : "")">
                    <td>@setting.Id</td>
                    <td>@setting.FromDate.ToString("dd-MM-yyyy")</td>
                    <td>@(setting.UntilDate == DateTime.MaxValue ? "" : setting.UntilDate.ToString("dd-MM-yyyy"))</td>
                    <td>
                        @if (setting.FromDate > DateTime.Now.Date)
                        {
                            <a href="/configuration/settings/@setting.Id" class="btn btn-primary">Edit</a>
                            <a href="/configuration/settings/delete/@setting.Id" class="btn btn-primary">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table">
        <thead>
            <tr>
                <th>Selected setting</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Id</td>
                <td>@activeSetting.Id</td>
            </tr>
            <tr>
                <td>Reservation times</td>
                <td>Between @activeSetting.Workhours.StartHour &amp; @activeSetting.Workhours.EndHour</td>
            </tr>
            <tr>
                <td>Holidays</td>
                <td>
                    @foreach (var holiday in activeSetting.Holidays)
                    {
                        @holiday.Date.ToString("dd-MM-yyyy");
                        <br />
                    }
                </td>
            </tr>
            <tr>
                <td>Target reservations</td>
                <td>@activeSetting.DaysRequiredInOffice days/week</td>
            </tr>
            <tr>
                <td>Reservation window</td>
                <td>@activeSetting.FutureReservationWindow days in the future</td>
            </tr>
            <tr>
                <td>Weekend reservations</td>
                <td>@activeSetting.WeekendsAllowed</td>
            </tr>
        </tbody>

    </table>
    <h4>Rooms</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th># of Seats</th>
                <th><a href="/configuration/AddRoom" class="btn btn-primary">Add</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in allRooms)
            {
                <tr>
                    <td>@room.Id</td>
                    <td>@room.Name</td>
                    <td>@room.AvailableSeats</td>
                    <td> 
                            <a href="/configuration/rooms/@room.Id" class="btn btn-primary">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public ISettingsService SettingsService { get; set; }
    public List<SettingReadViewModel> allSettings;
    private SettingReadViewModel activeSetting;
    [Inject]
    public IRoomService RoomService { get; set; }
    public List<RoomsReadViewModel> allRooms;

    protected override async Task OnInitializedAsync()
    {
        allSettings = await SettingsService.GetAllSettings();
        activeSetting = await SettingsService.GetActiveSetting(DateTime.Now);
        allRooms = await RoomService.GetAllRooms(DateTime.Now);
    }

    async Task UpdateActiveSettingDisplay(MouseEventArgs mouseEventArgs, DateTime versionDate)
    {
        activeSetting = await SettingsService.GetActiveSetting(versionDate);
    }

    async Task RemoveSetting(MouseEventArgs mouseEventArgs, int id)
    {
        var res = await SettingsService.DeleteSetting(id);

    }

}

@page "/reservation"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<h3>Make a New Reservation</h3>

<EditForm Model="newRes" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-4">
            <RadzenDatePicker @bind-Value=@choosenDay DateFormat="dd-MM-yyyy" />
            <RadzenRadioButtonList @bind-Value=@value TValue="int" Orientation="Radzen.Orientation.Horizontal" Change=@((args) => OnChangeRadio(args, "Select Hele dag/Halve Dag")) Style="margin-top:30px">
                <Items>
                    <RadzenRadioButtonListItem Text="Full day" Value="8" />
                    <RadzenRadioButtonListItem Text="Half day" Value="4" />
                </Items>
            </RadzenRadioButtonList>
            @if (displayMessage)
            {
                <div class="alert alert-@(positive ? "success" : "danger")" role="alert" style="margin-top: 30px">
                    @message
                </div>
            }
        </div>
        <div class="col-md-7" id="accordionExample">
            @foreach (var room in roomList)
            {
                <Room RoomTitle="@room.Name" Data="@times" RoomId="@room.Id" BindingValueChanged="value => TimeChanged(value)" SubmitBtnClick="x => OnSubmit()"></Room>
            }
        </div>
    </div>
</EditForm>


@code {
    [Inject]
    public IReservationsService ReservationsService { get; set; }
    [Inject]
    public ISettingsService SettingsService { get; set; }
    [Inject]
    public IRoomService RoomService { get; set; }

    List<RoomsReadViewModel> roomList = new List<RoomsReadViewModel>();
    List<PickerTimeRange> times = new List<PickerTimeRange>();
    ReservationCreateViewModel newRes = new ReservationCreateViewModel();
    IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    SettingReadViewModel settins { get; set; }

    DateTime choosenDay = DateTime.Today;
    DateTime date = DateTime.Today.AddDays(1);
    int value = 4;
    private bool positive = true;
    private bool displayMessage = false;
    private string message;
    private string _authMessage;
    private string _userId;

    private static PickerTimeRange eventResult = new PickerTimeRange();

    protected bool TimeChanged(PickerTimeRange time)
    {
        eventResult = time;
        Console.WriteLine("from DateChanged: " + Newtonsoft.Json.JsonConvert.SerializeObject((PickerTimeRange)time));
        if (time.pick >= time.min && time.pick.Add(new TimeSpan(value, 0, 0)) <= time.max)
        {
            DisplayMessage("Time picked is between given range");
            return true;
        }
        else
        {
            DisplayMessage("Time picked is NOT between given range", false);
        }
        return false;
    }

    private async Task DisplayMessage(string _message, bool _positive = true)
    {
        displayMessage = true;
        positive = _positive;
        message = _message;
        await Task.Delay(10000);
        displayMessage = false;
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _userId = user.FindFirst(c => c.Type == "sub")?.Value;
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    protected override async Task<Task> OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        //settins = await SettingsService.GetActiveSetting(DateTime.Today);
        settins = new SettingReadViewModel
        {
            Workhours = new OfficePlanner.Shared.Workhours
            {
                StartHour = "7:00:00",
                EndHour = "16:00:00"
            }
        };
        await GetAvailableSpace();
        return base.OnInitializedAsync();
    }

    async Task GetAvailableSpace()
    {
        var res = await ReservationsService.GetReservationByDate(choosenDay, choosenDay.AddDays(1));
        roomList = await RoomService.GetAllRooms(DateTime.Now);
        times = new List<PickerTimeRange>();

        TimeSpan startHour = TimeSpan.Parse(settins.Workhours.StartHour);
        TimeSpan endHour = TimeSpan.Parse(settins.Workhours.EndHour);

        foreach (var room in roomList)
        {
            int deltaSeats = room.AvailableSeats - res.Reservations.Where(x => x.Room == room.Id).Count();
            Console.WriteLine(deltaSeats);
            foreach (var reservation in res.Reservations)
            {
                if (room.Id == reservation.Room)
                {
                    var hoursBeforeAReservation = (reservation.StartDate.TimeOfDay - startHour).TotalHours;
                    var hoursAfterAReservation = (endHour - reservation.EndDate.TimeOfDay).TotalHours;

                    if (hoursBeforeAReservation >= value)
                    {
                        times.Add(new PickerTimeRange
                        {
                            roomId = reservation.Room,
                            min = startHour,
                            max = reservation.StartDate.TimeOfDay
                        });
                    }
                    if (hoursAfterAReservation >= value)
                    {
                        times.Add(new PickerTimeRange
                        {
                            roomId = reservation.Room,
                            min = reservation.EndDate.TimeOfDay,
                            max = endHour
                        });
                    }
                }
            }

            for (int i = 0; i < deltaSeats; i++)
            {
                times.Add(new PickerTimeRange
                {
                    roomId = room.Id,
                    min = startHour,
                    max = endHour
                });
            }
        }
    }
    async Task OnChangeDate(DateTime? value, string name, string format)
    {
        await GetAvailableSpace();
    }
    async Task OnChangeRadio(int? value, string name)
    {
        await GetAvailableSpace();
    }
    async Task OnSubmit()
    {

        if (TimeChanged(eventResult))
        {
            newRes = new OfficePlanner.Shared.ViewModels.ReservationCreateViewModel()
            {
                StartDate = choosenDay.Date + eventResult.pick,
                EndDate = choosenDay.Date + eventResult.pick.Add(new TimeSpan(value, 0, 0)),
                User = _userId,
                Room = eventResult.roomId
            };
            var validationResult = await ReservationsService.Validate(newRes);
            if (validationResult)
            {
                if (await ReservationsService.CreateReservation(newRes))
                {
                    DisplayMessage("reservation is submitted");
                }
                else
                {
                    DisplayMessage("reservation is unsuccessful", false);
                }

            }
            else
            {
                DisplayMessage("reservation is unsuccessful", false);
            }
        }
        else
        {
            DisplayMessage("reservation is unsuccessful", false);
        }

    }
}

@page "/reservation"
@inject HttpClient Http


<h3>Make a New Reservation</h3>

<EditForm Model="@newRes" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-4">
            <RadzenDatePicker @bind-Value=@newRes.StartDate DateFormat="d" Change=@(args => OnChangeDate(args, "DatePicker", "dd/MM/yyyy")) />

            <RadzenRadioButtonList @bind-Value=@value TValue="int" Orientation="Radzen.Orientation.Vertical" Change=@((args) => OnChangeRadio(args, "Select Hele dag/Halve Dag"))>
                <Items>
                    <RadzenRadioButtonListItem Text="Hele Dag" Value="8" />
                    <RadzenRadioButtonListItem Text="halve Dag" Value="4" />
                </Items>
            </RadzenRadioButtonList>


        </div>
        <div class="col-md-7" id="accordionExample">
            @foreach (var room in result)
            {
                <Room Data="@times"></Room>
            }
            @*<div class="card">
                <div class="card-body">
                    <div class="card-title">Ruimte #1</div>
                    <div class="accordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                    Bureau #1 <span class="badge badge-success float-end">Beschikbaar van 12:00 tot 16:00 </span>
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    <span>Kies uw start tijd: </span>
                                    <input type="time" id="appt" name="appt"
                                           min="09:00" max="18:00" required>
                                    <button type="submit" class="btn btn-primary">Submit</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>*@
        </div>
    </div>
</EditForm>




@code {
    [Inject]
    public IReservationsService ReservationsService { get; set; }
    DateTime today = DateTime.Parse("2021 nov 23");
    int value = 1;
    int valueX = 4;
    DateTime date = DateTime.Today.AddDays(1);
    List<RoomsReadViewModel>? result = new List<RoomsReadViewModel>();
    List<PickerTimeRange>? times = new List<PickerTimeRange>();

    protected override async Task<Task> OnInitializedAsync()
    {
        var res = await ReservationsService.GetReservationByDate(today, today.AddDays(1));
        result = await Http.GetFromJsonAsync<List<RoomsReadViewModel>>("api/Rooms");
        // var settings = await Http.GetFromJsonAsync<SettingReadViewModel>("api/Settings/active?date=2021-11-11");
        times = new List<PickerTimeRange>();

        DateTime startHour = DateTime.Parse("2021 jan 01 07:00:00");
        DateTime endHour = DateTime.Parse("2021 jan 01 17:00:00");

        foreach (var room in result)
        {
            int deltaSeats = room.AvailableSeats - res.Reservations.Where(x => { return true /*room.Id == reservation.Room*/; }).Count();
            Console.WriteLine(deltaSeats);
            foreach (var reservation in res.Reservations)
            {
                if (true/*room.Id == reservation.Room*/)
                {
                    var hoursBeforeAReservation = (reservation.StartDate.TimeOfDay - startHour.TimeOfDay).TotalHours;
                    var hoursAfterAReservation = (endHour.TimeOfDay - reservation.EndDate.TimeOfDay).TotalHours;
                    Console.WriteLine($"in foreach loop, delta hoursBeforeAReservation is: {hoursBeforeAReservation}");
                    Console.WriteLine($"in foreach loop, delta hoursAfterAReservation is: {hoursAfterAReservation}");

                    if (hoursBeforeAReservation >= valueX)
                    {
                        times.Add(new PickerTimeRange
                        {
                            roomId = reservation.Room,
                            min = startHour.TimeOfDay,
                            max = reservation.StartDate.TimeOfDay
                        });
                    }
                    if (hoursAfterAReservation >= valueX)
                    {
                        times.Add(new PickerTimeRange
                        {
                            roomId = reservation.Room,
                            min = reservation.EndDate.TimeOfDay,
                            max = endHour.TimeOfDay
                        });
                    }
                }
            }

            for (int i = 0; i < deltaSeats; i++)
            {
                Console.WriteLine($"in for loop, total free seats number: {i} of {deltaSeats}");
                times.Add(new PickerTimeRange
                {
                    /* roomId = room.Id,*/
                    min = startHour.TimeOfDay,
                    max = endHour.TimeOfDay
                });
            }
        }


        Console.WriteLine();
        Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(result));
        Console.WriteLine("reservations:\n");
        foreach (var item in res.Reservations)
        {
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(item));
        }
        Console.WriteLine("times:\n");
        foreach (var item in times)
        {
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(item));
        }
        return base.OnInitializedAsync();
    }

    OfficePlanner.Shared.ViewModels.ReservationCreateViewModel newRes = new OfficePlanner.Shared.ViewModels.ReservationCreateViewModel()
    {
        StartDate = DateTime.Parse("2021 nov 23"),
        User = "1",
        Room = 1
    };

    void OnChangeDate(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value?.ToString(format)}");
    }
    void OnChangeRadio(int? value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }
    async Task OnSubmit()
    {
        Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(newRes));
        var isValid = await ReservationsService.Validate(newRes);

        if (isValid)
        {
            await ReservationsService.CreateReservation(newRes);
            Console.WriteLine("reservation is submitted");
        }
        Console.WriteLine("reservation is unsuccessful");

    }
    void OnChange(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }

}

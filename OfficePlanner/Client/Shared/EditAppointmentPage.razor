@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<RadzenTemplateForm TItem="DataItem" Data="@model" Submit=@OnSubmit>
    @if (!deleted)
    {
        <p>@model.Text</p>
        @if (deleteable)
        {
            @if (!confirm)
            {
                <p>Do you want to delete this reservation</p>
                <div class="row">
                    <div class="col-md-3"></div>
                    <div class="col">
                        <RadzenButton Click=@(args=>confirm=true) Text="Delete" />
                        <RadzenButton Click=@(x=>DialogService.Close(model)) Text="Close" />
                    </div>
                </div>
            }
            else
            {
                <p>Please confirm</p>
                <div class="row">
                    <div class="col-md-3"></div>
                    <div class="col">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Confirm" />
                        <RadzenButton Click=@(x=>DialogService.Close(model)) Text="Close" />
                    </div>
                </div>
            }
        }
    }
    else
    {
        <p>Your reservation has been deleted</p>
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col">
                <RadzenButton Click=@(x=>DialogService.Close(model)) Text="Close" />
            </div>
        </div>
    }

</RadzenTemplateForm>
@code {
    [Inject]
    public IReservationsService ReservationsService { get; set; }
    [Parameter]
    public DataItem Reservation { get; set; }
    private bool confirm = false;
    private bool deleted = false;
    private bool deleteable = false;

    DataItem model = new DataItem();

    string _authMessage;
    string _userId;
    IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnParametersSetAsync()
    {
        model = Reservation;
        await GetClaimsPrincipalData();
        await base.OnParametersSetAsync();
    }
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _userId = user.FindFirst(c => c.Type == "sub")?.Value;
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }

        if (model.Uid == _userId)
        {
            deleteable = true;
        }
    }

    async Task OnSubmit(DataItem model)
    {
        confirm = false;
        Console.WriteLine("newRes: " + Newtonsoft.Json.JsonConvert.SerializeObject(model));
        deleted = await ReservationsService.DeleteReservation(model.Id);
    }
}